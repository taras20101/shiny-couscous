from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
import json

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
SETTINGS_MENU = range(1)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ callback_query —á–∏ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if update.callback_query:
        message = update.callback_query.message
        await update.callback_query.answer()
    else:
        message = update.message

    keyboard = [
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—É–º—É", callback_data='min_amount')],
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —Å—É–º—É", callback_data='max_amount')],
        [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ –ø–ª–∞—Ç—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏", callback_data='payment_methods')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:\n\n" \
           "–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 1000 UAH\n" \
           "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: 200000 UAH\n" \
           "–ü–ª–∞—Ç—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏: –ú–æ–Ω–æ–±–∞–Ω–∫, –ü—Ä–∏–≤–∞—Ç24"

    if update.callback_query:
        await message.edit_text(text, reply_markup=reply_markup)
    else:
        await message.reply_text(text, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back':
        from .start import start_command
        await start_command(update, context)
        return
        
    await settings_command(update, context)

async def enter_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS_MENU
        
    try:
        amount = float(update.message.text)
        if amount < 0:
            raise ValueError
        context.user_data['limit_amount'] = amount
        await settings_command(update, context)
        return SETTINGS_MENU
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ")
        return 'ENTER_LIMIT'

async def enter_transaction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await settings_command(update, context)
        return SETTINGS_MENU
        
    try:
        amount = float(update.message.text)
        if amount < 0:
            raise ValueError
        context.user_data['transaction_amount'] = amount
        await settings_command(update, context)
        return SETTINGS_MENU
    except ValueError:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –¥–æ–¥–∞—Ç–Ω–µ —á–∏—Å–ª–æ")
        return 'ENTER_TRANSACTION' 