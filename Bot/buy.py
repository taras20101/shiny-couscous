from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from services import (
    binance_api, mexc_api, bybit_api, 
    bingx_api, okx_api, kucoin_api, bitget_api
)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
CHOOSE_EXCHANGE = range(1)

async def buy_usdt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("Binance P2P", callback_data='buy_binance')],
        [InlineKeyboardButton("MEXC P2P", callback_data='buy_mexc')],
        [InlineKeyboardButton("Bybit P2P", callback_data='buy_bybit')],
        [InlineKeyboardButton("BingX P2P", callback_data='buy_bingx')],
        [InlineKeyboardButton("OKX P2P", callback_data='buy_okx')],
        [InlineKeyboardButton("KuCoin P2P", callback_data='buy_kucoin')],
        [InlineKeyboardButton("Bitget P2P", callback_data='buy_bitget')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üè¶ –û–±–µ—Ä—ñ—Ç—å –±—ñ—Ä–∂—É –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ USDT:",
        reply_markup=reply_markup
    )
    return CHOOSE_EXCHANGE

async def exchange_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'back':
        keyboard = [
            ["üí∞ –ö—É–ø–∏—Ç–∏ USDT", "üí± –ü—Ä–æ–¥–∞—Ç–∏ USDT"],
            ["üìä –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø—Ä–µ–¥—ñ–≤", "üìà –ê—Ä–±—ñ—Ç—Ä–∞–∂"],
            ["üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=reply_markup)
        return ConversationHandler.END
    
    # –í–∏–±–∏—Ä–∞—î–º–æ API –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –±—ñ—Ä–∂—ñ
    exchanges = {
        'buy_binance': (binance_api.BinanceAPI, "Binance"),
        'buy_mexc': (mexc_api.MexcAPI, "MEXC"),
        'buy_bybit': (bybit_api.BybitAPI, "Bybit"),
        'buy_bingx': (bingx_api.BingXAPI, "BingX"),
        'buy_okx': (okx_api.OkxAPI, "OKX"),
        'buy_kucoin': (kucoin_api.KuCoinAPI, "KuCoin"),
        'buy_bitget': (bitget_api.BitgetAPI, "Bitget")
    }
    
    api_class, exchange_name = exchanges.get(query.data, (None, None))
    if not api_class:
        await query.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –±—ñ—Ä–∂—ñ")
        return ConversationHandler.END
    
    offers = api_class.get_buy_offers(context=context)
    
    if not offers:
        keyboard = [
            ["üí∞ –ö—É–ø–∏—Ç–∏ USDT", "üí± –ü—Ä–æ–¥–∞—Ç–∏ USDT"],
            ["üìä –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø—Ä–µ–¥—ñ–≤", "üìà –ê—Ä–±—ñ—Ç—Ä–∞–∂"],
            ["üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await query.message.reply_text(
            "‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π.\n"
            "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    
    message = f"üí∞ –ù–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –∫—É–ø—ñ–≤–ª—ñ USDT –Ω–∞ {exchange_name}:\n\n"
    
    for i, offer in enumerate(offers, 1):
        message += (
            f"{i}. –¶—ñ–Ω–∞: {offer['price']:.2f} UAH\n"
            f"üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü—å: {offer['merchant']} | ‚≠ê {offer['completion']}\n"
            f"üíé –î–æ—Å—Ç—É–ø–Ω–æ: {offer['amount']} USDT\n"
            f"üè¶ –û–ø–ª–∞—Ç–∞: {', '.join(offer['payment_methods'])}\n\n"
        )
    
    keyboard = [
        ["üí∞ –ö—É–ø–∏—Ç–∏ USDT", "üí± –ü—Ä–æ–¥–∞—Ç–∏ USDT"],
        ["üìä –ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø—Ä–µ–¥—ñ–≤", "üìà –ê—Ä–±—ñ—Ç—Ä–∞–∂"],
        ["üíß –õ—ñ–∫–≤—ñ–¥–Ω—ñ—Å—Ç—å", "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await query.message.reply_text(message, reply_markup=reply_markup)
    return ConversationHandler.END

async def amount_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "–ù–∞–∑–∞–¥":
        keyboard = [
            ["–ö—É–ø–∏—Ç–∏ USDT", "–ü—Ä–æ–¥–∞—Ç–∏ USDT"],
            ["–ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø—Ä–µ–¥—ñ–≤", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    try:
        amount_uah = float(update.message.text)
        price = binance_api.BinanceAPI.get_usdt_price()
        
        if price is None:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É—Ä—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return ConversationHandler.END
        
        usdt_amount = amount_uah / price
        
        keyboard = [
            ["–ö—É–ø–∏—Ç–∏ USDT", "–ü—Ä–æ–¥–∞—Ç–∏ USDT"],
            ["–ü–µ—Ä–µ–≥–ª—è–¥ —Å–ø—Ä–µ–¥—ñ–≤", "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üí∞ –ö—É–ø—ñ–≤–ª—è USDT\n\n"
            f"–°—É–º–∞ –≤ UAH: {amount_uah:.2f}\n"
            f"–ö—É—Ä—Å: {price:.2f} UAH\n"
            f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ: {usdt_amount:.2f} USDT\n\n"
            f"–î–ª—è –æ–ø–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ:\n"
            f"- Monobank\n"
            f"- PrivatBank\n"
            f"- —ñ–Ω—à—ñ –∫–∞—Ä—Ç–∏",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É.")
        return CHOOSE_EXCHANGE 